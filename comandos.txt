.:: Resumen de comandos y notas de Git y Github ::.

GIT  -- docs: https://git-scm.com/docs 
- git init (crea stage y repo local)
- git add .  (agrega cambios al stage)
- git commint -m "mensaje" (agrega cambios al repo local)
  -am (agregar los cambios y realiza el commit de archivos ya traqueados)
- git status (ver estado de los cambios)
- git show <nombre_archivo>  (Muestra el contendo y los cambios que a sufrido el archivo)
- git log (ver la historia de los commits realizados)
- git config --global user.name o user.email (cambiar usuario/correo)
- git diff (ver diferencias entre commits)
- git reset (volver a un commit pasado definitivamente en todo)
   --hard: Borra todos los cambios hasta el commit
   --soft: Borra los cambios hasta el commit pero guarda en stage
   HEAD quitar archivos del stage
- git rm --cache (Elimina archivos del stage)
- git rm --force (Elimina archivos de todo git y disco duro)

BRANCHES
- git branch <nombre_branch> (permite crear un branch)
- git checkout <nombre_branch> (permite cambiar de branch)
- git switch <nombre_branch> (parece que permite cambiar de branch)
- git merge <nombre_branch> (Trae los cambios desde nombre_branch al branch actual y los combina)
      -- En caso de conflicto se debe corregir manualmente
-- git branch -d <nombre_branch>   (Elimina un branch,pero válida si se ha hecho merge de sus cambios)
-- git branch -D <nombre_branch>   (Elimina un branch, pero no válida el merge de sus cambios)
- git merge origin/main (Actualiza un branch con el main, desde otro branch)
- git branch -r (Muestra las ramas remotas)
- git branch -a (Muestra todas la ramas, útil para saber cuales necesitan push)

GITHUB  -- https://docs.github.com/es
- github realizó un cambio en el nombre de la rama principal por MAIN.
- git remote add origin <url_github> (asocia un repo_local con un repo_remoto)
- git remote -v  (muestra el origin remoto asociado)
- git pull origin <nombre_branch> (trae cambios del repo_remoto al repo_local, se puede usar fetch)
- git pull origin <nombre_branch> --allow-unrelated-histories (para corregir "unrelated histories" debido a repo_local y remoto nunca relacionados)
- git push origin <nombre_branch> (envia branch del repo_local al repo_remoto)
- git push origin --delete <nombre_branch> (elimina un brach del repo_remoto)
- Notas: tiene estadísticas de los cambios, contribuidores

REMOTE REPOS y SSH
- Cifrado simétrico de un solo camino
- ssh : se utilizar Protocolo SSH (Secure Shell)
- ssh-keygen -t rsa -b 4096 -C "correo_github" (crear llave ssh, en .ssh)
- eval $(ssh-agent) revisar si el agente de ssh esta corriendo
- ssh-add ~/.ssh/id_rsa (agregar la llave al sistema)
- git remote set-url origin <url_ssh_github> (cambiar la url del origin)

TAGs
- git log --all --graph --decorate --oneline (Muestra un árbol con los commit_hash)
- git tag -a v0.1 -m "mensaje" commit_hash (Crea un tag en base a un commit_hash)
- git tag (muestra los tags que existen)
- git show-ref --tags (muestra el tag asociado al repo_local)
- git push origin --tags (enviar los tags al repo_remoto, agregar al comando :refs/tags/<nombre_tag> para borrar)
- git tag -d <nombre_tag> (borrar el tag)
 
WORKFLOW
- git clone <url https del repo_remoto> (para clonar el repositorio)
- solicitar acceso al encargado del repo_remoto (enviar username o email)
- encargado autoriza acceso con username o email
- realizar commits y push al repo_remoto
- pull request (espacio intermedio el repo_remoto para coordinar cambios y aprobarlos en github)
- fork (Funcionalidad para clonar un repo de otro usuario en github)
- pull request entre forks
- upstream (se utiliza para crear una rama que permite traer cambios desde otro repo_remoto, cuando se trabaja con forks)
  -- git remote add upstream url_repo_remoto (agregar una fuente de origen nueva)
  -- git pull upstream main
- Travis CI (Para gestionar Integración Continua, privativo)
- Jenkins (Para gestionar Integración Continua, free)
- .gitignore (Archivo de lista de archivos que git ignorara para no rastrearlo en el repo_local)

REBASE
- git rebase <branch> (Se utiliza para unir cambios y unir historias de commits entre branches)
 -- git rebase <branch_main>  (1° hacer rebase desde otro branch hacia el branch_main)
 -- git rebase <otro_branch> (2° hacer rebase desde el branch_main hacia el otro_branch )
 -- usar solo en repos locales, ya que en repo remotos no es buena práctica por que sobreescribe las historias de los commits

STASH
- git stash (Guarda cambios en lugar temporal y reversa esos cambios)
- git stash list (Ver los cambios)
- git stash pop (regresar a cambios guardados del stash)
  -- git stash pop stash@(numero_stash se obtiene con git stash list)
- git stash branch <branch_name> (Crea una rama con el cambio temporal)
   -- stash@(numero_stash) (Se puede usar el número de stash)
- git stash save "Descripción del stash" (Guarda un stash con nombre)
- git stash apply stash@(numero_stash)  (Retoma cambios de una posición específica del stash)
- git stash drop (Elimina cambios del stash)
 -- stash@(numero_stash) (Se puede especificar el número de stash)
- git stash clear (limpia todo el stash)

CLEAN
- git clean -f (Eliminar archivos nuevos no traqueados, excluye los ignorados en .gitignore)
- git clean --dry-run o -n(Lista los archivos no trackeados nuevos)
- git clean -fd (Elimina archivos nuevos y carpetas no traqueadas)
- git clean -x (Elimina incluso los archivos ignorados)

CHERRY-PICK
- git cherry-pick <hash_commit> (Traerme cambios de un commit específico, sin importar el branch)
-- es una mala práctica, usar con discreción, por que se generan diferencias en la historia de cambios

CASOS EMERGENCIA
1- Cuando me faltó un cambio en un commit:
 -- Realizamos el cambio faltante
 -- git commit --amend (para agregar el cambio al último commit e inclusive modificar el texto enviado \m/)

2- Volver a un commit incluso despúes de haber realizado commit, en caso de errores 
 -- git reflog (muestra todos los cambios realizados sin importar que se hayan borrado, por hash_commit y HEAD@{n})
 -- git reset --hard <commit_hash> (mala práctica, usar con discreción)

3- Buscar palabras 
- git grep "palabra" (Busca la "palabra" en los archivos) https://git-scm.com/docs/git-grep
 -- -n cuenta la cantidad de apariciones de la palabra
- git log -S "palabra" (Busca la "palabra" en los commits) https://git-scm.com/docs/git-log 
 -- git log --grep "palabra" (Busca en las notas de los commits)

COMANDOS ÚTILES

SHORTLOG
- git shortlog (Lista los commits realizados por usuario)
- git shortlog -sn (Lista los usuarios y la cantidad de sus commits)
- git shortlog -sn --all (Lista todos los commits incluso los borrados)
- git shortlog -sn --all --no-merges (Lista sin considerar los merges)

ALIAS
- git config --global alias.nombre_alias "comando" (Crea un comando alias de git)
  -- Ejemplo: git config --global alias.stats "shortlog -sn"
- git config --list | grep alias (Consultar los alias git)
- git config --global --unset alias.nombre_alias

BLAME
- git blame <archivo> -c (Muestra quién realizó los cambios de cada línea, -c identa)
- git blame -L20,35(-L muestra solo líneas 20 a la 35)

HELP
- git comando --help (Abre el manual de como funciona un comando)

ADICIONALES
- gitk es una herramienta que muestra los commit de git de forma visual 

AREAS DE TRABAJO
- Working copy->staging->repo_local->repo_remoto(gitlab, github, servidor personalizado)

